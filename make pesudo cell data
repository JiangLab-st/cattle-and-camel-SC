library(dplyr)
library(purrr)
library(magrittr)
library(Seurat)

Args <- commandArgs()
parser = argparse::ArgumentParser(description="PseudoCell")
parser$add_argument('-I','--input', help='input rds file')
parser$add_argument('-i','--list', help='input rds name list')
parser$add_argument('-O','--output',help='out result dir')
parser$add_argument('-X','--multiplier',help='pseudo cell multiplier 0-100')
args = parser$parse_args()
multiplier.usage <- if(!is.null(args$multiplier)) args$multiplier else 20

GatherData<- function(object,
                      assay,
                      slot_use,
                      ...) {
  
  assay <- assay %||% "RNA"
  slot_use <- slot_use %||% "data"
  obj_data <- GetAssayData(
    object = object,
    assay = assay,
    slot = slot_use
  ) %>%
    as.matrix()
  return(obj_data)
}



PseudoCell  <- function(object,
                        assay_use = NULL,
                        slot_use = NULL,
                        cluster_use =NULL,
                        pseudocell.size  =NULL){
  message("tips: 
  Cluster_use : one col in metadata
  pseudocell.size : how many cell will be pseudo")
  
  Inter<- GatherData(object = object,
                     assay = assay_use,
                     slot_use = slot_use)
  Inter[Inter<0]=0
  idd<-object@meta.data
  Inter.id<-cbind(rownames(idd),as.vector(idd[,cluster_use]))
  
  rownames(Inter.id)<-rownames(idd)
  colnames(Inter.id)<-c("CellID","Celltype")
  
  Inter.id<-as.data.frame(Inter.id)
  Inter1<-Inter[,Inter.id$CellID]
  Inter<-as.matrix(Inter1)
  pseudocell.size = pseudocell.size ## 10 test
  new_ids_list = list()
  Inter.id$Celltype <- as.factor(Inter.id$Celltype)
  for (i in 1:length(levels(Inter.id$Celltype))) {
    cluster_id = levels(Inter.id$Celltype)[i]
    cluster_cells <- rownames(Inter.id[Inter.id$Celltype == cluster_id,])
    cluster_size <- length(cluster_cells)
    pseudo_ids <- floor(seq_along(cluster_cells)/pseudocell.size)
    pseudo_ids <- paste0(cluster_id, "_Cell", pseudo_ids)
    names(pseudo_ids) <- sample(cluster_cells)
    new_ids_list[[i]] <- pseudo_ids
  }
  
  new_ids <- unlist(new_ids_list)
  new_ids <- as.data.frame(new_ids)
  new_ids_length <- table(new_ids)
  
  new_colnames <- rownames(new_ids)  ###add
  all.data<-Inter[,as.character(new_colnames)] ###add
  all.data <- t(all.data)###add
  
  new.data<-aggregate(list(all.data[,1:length(all.data[1,])]),
                      list(name=new_ids[,1]),FUN=mean)
  rownames(new.data)<-new.data$name
  new.data<-new.data[,-1]
  
  new_ids_length<-as.matrix(new_ids_length)##
  short<-which(new_ids_length< pseudocell.size -1 )##
  new_good_ids<-as.matrix(new_ids_length[-short,])##
  result<-t(new.data)[,rownames(new_good_ids)]
  rownames(result)<-rownames(Inter)
  
  newobject <- CreateSeuratObject(result)
  newobject@misc$idtrans <- new_ids
  newobject@commands$PseudoCell <- LogSeuratCommand(newobject, return.command = TRUE)
  return(newobject)
}

setwd(paste0(args$input))
list <- read.table(args$list)
list <- as.matrix(list)
list <- as.character(list)
multiplier.usage <- as.numeric(multiplier.usage)
for (i in list){
  dat <- readRDS(paste0(i,'.RDS'))
  dat[["active.ident"]] <- dat@meta.data$celltype
  dat <- PseudoCell(dat,'RNA',"data","active.ident",args$multiplier)
  saveRDS(dat,paste0(args$output,i,'_PseudoCell.RDS'))
}
